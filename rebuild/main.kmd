KMD
00000000:             ; ; This file is the main for the whole OS
00000000:             ; 
00000000:             ; GET Kernel_Files/kernel.s
00000000:             ; ; This file is the main for the kernal 
00000000:             ; 
00000000: EA000006    ; B Initialise_Program  ; This Reset Exception
00000004: EAFFFFFE    ; Undefined_Instruction B Undefined_Instruction ; Undefined Instruction cause a branch to here
00000008: EA000005    ; B SVC_Handler         ; SVC calls jump to here and then go to the SVC Handler
0000000C: EAFFFFFE    ; Prefetch_Abort        B Prefetch_Abort ; If there is a Prefect Abort the PC come here
00000010: EAFFFFFE    ; Data_Abort            B Data_Abort     ; If there is a Data Abort the PC jump here
00000014: EAFFFFFE    ; Not_Provided_Except   B Not_Provided_Except ; Do not know why PC might jump here
00000018:             ; ; ---------------------------------------------------------
00000018:             ; ; Needs to be done
00000018: EA000011    ; B IRQ_Handler         ; If and Interupt occurs PC jumps here.
0000001C: EAFFFFFE    ; Fast_Interrupt_Request B Fast_Interrupt_Request ; If a Fast Interrupt occurs, PC jumps here
00000020:             ; 
00000020:             ; Initialise_Program
00000020: EA000035    ; B kernal_Initialise
00000024:             ; 
00000024:             ; GET     kernel_SVC_Handler.s
00000024: E92D4030    ; SVC_Handler PUSH  {R4-R5, LR}
00000028: E51E4004    ;             LDR   R4, [LR, #-4] ; Read the SVC Instruction from the LR
0000002C: E3C444FF    ;             BIC   R4, R4, #&FF000000 ; Masks off the Operation Code from SVC Call
00000030: E3540014    ;             CMP   R4, #SVC_Jump_Table_Size ; Checks that the Operation Code is defined.
00000034: 8A000009    ;             BHI   SVC_Out_Of_Bounds   ; Jumps to this Location If the SVC Calls is out of bound
                      ; s
00000038: E28F500C    ;             ADR   R5, SVC_Jump_Table  ; Loads SCV Jump Table Start Address into R5
0000003C: E28FE000    ;             ADD   LR, PC, #&0         ; Loads LR with end of handler, which handles return to S
                      ; VC Calls
00000040: E795F004    ;             LDR   PC, [R5, R4]        ; Loads the PC with the address of the function being cal
                      ; led
00000044: E8BD4030    ;             POP   {R4-R5, LR}         ; Restores Registers and Loads Return Address into LR
00000048: E1B0F00E    ;             MOVS  PC, LR              ; Restores CSPR code and moves PC to call address
0000004C:             ; 
0000004C:             ; SVC_Jump_Table_Size EQU SVC_Jump_Table_End - SVC_Jump_Table
0000004C: 00000E10    ; SVC_Jump_Table      DEFW SVC_printChar
00000050: 00000EF4    ;                     DEFW Release_LCD_Ownership
00000054: 00000D9C    ;                     DEFW Set_LED 
00000058: 00000B4C    ;                     DEFW Transmit_word
0000005C: 00000D30    ;                     DEFW Shedule_Add 
00000060:             ;                     ;DEFW Initialise_Process
00000060:             ;                     ;DEFW Initialise_Process_Return
00000060:             ; SVC_Jump_Table_End
00000060:             ; 
00000060:             ; SVC_Jump_Table_place_holder
00000060:             ; 
00000060:             ; ; SVC Call Out of Bounds
00000060: EAFFFFFE    ; SVC_Out_Of_Bounds   B   SVC_Out_Of_Bounds ; SVC call out of bounds
00000064:             ; GET     kernel_IRQ_Handler.s
00000064:             ; ; Interrupt handler 
00000064:             ; IRQ_Handler 
00000064: E24EE004    ;     SUB     LR, LR, #4 ; moves LR back one step so no need to sub when returning
00000068: E92D4070    ;     PUSH    {R4-R6, LR} ; preserves registers
0000006C:             ; 
0000006C:             ;     ; Find which interrupts where triggered 
0000006C: E3A04201    ;     MOV     R4, #Port_Area 
00000070: E5D45018    ;     LDRB    R5, [R4, #Interrupt_Alert_Offset]
00000074:             ;     ;LDR     R6, [R4, #Interrupt_Active_Offset]
00000074:             ;     ;AND     R5, R5, R6
00000074:             ;     ;AND     R5, R5, #Interrupt_Desired
00000074:             ; 
00000074:             ;     ; Check if serial ready to read is high 
00000074: E3150010    ;     TST R5, #&10
00000078: 1B000003    ;     BLNE IRQ_RxD
0000007C:             ; 
0000007C:             ; 
0000007C:             ;     ; Check if serial ready to write is high 
0000007C: E3150020    ;     TST R5, #&20
00000080:             ;     ;BLNE IRQ_TxD    
00000080:             ; 
00000080:             ;     ; Check if time interrupt is high
00000080: E3150001    ;     TST R5, #&1
00000084: 1A000015    ;     BNE IRQ_Timer
00000088:             ; 
00000088:             ; 
00000088:             ; ; Return to were interrupt occured 
00000088: E8FD8070    ;     LDMFD SP!, {R4-R6, PC}^
0000008C:             ; 
0000008C:             ; IRQ_RxD ; interrupt from serial receiver 
0000008C: E92D400F    ;     PUSH    {R0-R3, LR} 
00000090: E3A03010    ;     MOV     R3, #&10
00000094: E7D41003    ;     LDRB     R1, [R4, R3] ; R4 comes from interrupt handler as a whole 
00000098:             ;     ;STRB     R1, [R4, R3] ; echos to terminal 
00000098:             ;     
00000098: E28F0C01    ;     ADR     R0, Serial_RxD_Buffer_Address
0000009C: E5100000    ;     LDR     R0, [R0]
000000A0: EB0003AA    ;     BL      buffer_put
000000A4: E3C55010    ;     BIC     R5, R5, #Interrupt_Receiver ; clears serial RxD interrupt
000000A8:             ;     ;STRB    R5, [R4, #Interrupt_Alert_Offset]
000000A8: E8BD800F    ;     POP     {R0-R3, PC}
000000AC:             ; 
000000AC:             ; 
000000AC:             ; IRQ_TxD 
000000AC:             ;     ; check if StandardOut has anything in its buffer 
000000AC:             ;     ; if so place into TxD until either buffer is empty or TxD is no longer ready 
000000AC:             ;     ; lower the TxD alert
000000AC: E92D4007    ;     PUSH    {R0-R2, LR}
000000B0: E28F0C01    ;     ADRL    R0, Serial_TxD_Buffer_Address
000000B4: E3A02010    ;     MOV     R2, #Terminal_Data
000000B8: EB0003B7    ;     BL      buffer_get
000000BC: E3510000    ;     CMP     R1, #0 
000000C0: 0A000001    ;     BEQ     TxD_buffer_empty
000000C4: E7841002    ;     STR     R1, [R4, R2]      
000000C8:             ;     
000000C8: E8BD8007    ;     POP     {R0-R2, PC}
000000CC:             ; 
000000CC:             ; TxD_buffer_empty
000000CC: E3A00020    ;     MOV     R0, #Interrupt_Transmit
000000D0: EB000298    ;     BL      Interrupt_Off
000000D4: E3C55020    ;     BIC     R5, R5, #Interrupt_Transmit ; clears serial RxD interrupt
000000D8: E5C45018    ;     STRB    R5, [R4, #Interrupt_Alert_Offset]
000000DC: E8BD8007    ;     POP     {R0-R2, PC}
000000E0:             ; 
000000E0:             ; 
000000E0:             ; IRQ_Timer
000000E0:             ;     ; this is where timing interrupts are handled
000000E0:             ;     ; will be used to start context switch 
000000E0: E92D0003    ;     PUSH    {R0-R1}
000000E4:             ;     ; Increment the time 
000000E4: E5D4100C    ;     LDRB    R1, [R4, #Interrupt_Timer_Offset]
000000E8: E2811064    ;     ADD     R1, R1, #Interrupt_Time_Interval
000000EC: E5C4100C    ;     STRB    R1, [R4, #Interrupt_Timer_Offset]
000000F0: E8BD0003    ;     POP     {R0-R1}
000000F4: E8BD4070    ;     POP     {R4-R6, LR}
000000F8: EA00031C    ;     B       Shedule_Get_Next
000000FC:             ;     
000000FC:             ; 
000000FC:             ; 
000000FC:             ; ; Loads the Kernal_Initialise code 
000000FC:             ; GET     kernel_Initialise.s
000000FC:             ; ; This program will set up the Operating systems 
000000FC:             ; ; It will 
000000FC:             ; ;   Set up Supervisor mode
000000FC:             ; ;       Set Stack pointer  
000000FC:             ; ;   Set up Interrupt mode 
000000FC:             ; ;       Set up anything required by the interrupts 
000000FC:             ; ;       Set Stack pointer
000000FC:             ; 
000000FC:             ; kernal_Initialise
000000FC:             ; 
000000FC:             ; ; Set up Supervisor 
000000FC:             ;  ; Set up Stack pointer 
000000FC: E28FD016    ;   ADRL    SP, Supervisor_Stack_End
00000100: E28DDC03    ; 
00000104:             ; 
00000104:             ; ; Set up Interrupt Mode 
00000104:             ;  ; Set up anything required or used by interrupts 
00000104:             ;   ; RxD Interrupt 
00000104:             ;    ; This interrupt requires a buffer to place things into 
00000104:             ;     ; Get address of buffer and store it in a know variable 
00000104: E28F0F5A    ;     ADRL    R0, Serial_RxD_Buffer_Start
00000108: E2800B01    ; 
0000010C: E28F108C    ;     ADRL    R1, Serial_RxD_Buffer_Address
00000110: E5010000    ;     STR     R0, [R1]
00000114:             ;     ; Initialise the buffer 
00000114: E28F103A    ;     ADRL    R1, Serial_RxD_Buffer_Size
00000118: E2811C01    ; 
0000011C: E5111000    ;     LDR     R1, [R1]
00000120: EB000380    ;     BL      buffer_initialise
00000124:             ; 
00000124:             ;   ; TxD Interrupt 
00000124:             ;    ; Buffer it uses
00000124:             ;     ; Get address of buffer and store it in a know variable 
00000124: E28F0E7A    ;     ADRL    R0, Serial_TxD_Buffer_Start
00000128: E2800000    ; 
0000012C: E28F1084    ;     ADRL    R1, Serial_TxD_Buffer_Address
00000130: E5010000    ;     STR     R0, [R1]
00000134:             ;     ; Initialise the buffer 
00000134: E28F101A    ;     ADRL    R1, Serial_TxD_Buffer_Size
00000138: E2811C01    ; 
0000013C: E5111000    ;     LDR     R1, [R1]
00000140: EB000378    ;     BL      buffer_initialise   
00000144:             ;   ; 
00000144:             ;   ; Timer Interrupt 
00000144:             ;   ; Get current timer time 
00000144:             ;   ; Add 200 to it 
00000144:             ;   ; 
00000144: E5D0100C    ;    LDRB R1, [R0, #Interrupt_Timer_Offset]
00000148: E2811064    ;    ADD  R1, R1, #Interrupt_Time_Interval
0000014C: E5C0100C    ;    STRB R1, [R0, #Interrupt_Timer_Offset]
00000150:             ; ; Switch Mode to Interupt mode 
00000150: E10F0000    ;     MRS     R0, CPSR                      ; Read Current Status of CPSR
00000154: E3C0001F    ;     BIC     R0, R0, #System_Mode_Bit_Mask ; Clears Mode field of CPSR
00000158: E3800012    ;     ORR     R0, R0, #IRQ_Mode             ; Append IRQ Mode to CPSR
0000015C: E121F000    ;     MSR     CPSR_c, R0                    ; Updates the CPSR
00000160:             ;  ;
00000160:             ;  ; Set up Interrupt Stack Pointer
00000160: E28FD00A    ;     ADRL    SP, Interrupt_Stack_End      ; Sets up Interrupt Stack Pointer
00000164: E28DDC05    ; 
00000168: E3A00011    ;    MOV      R0, #Interrupt_Desired
0000016C: EB00026C    ;    BL       Interrupt_Set
00000170:             ; ; Most likely redundant
00000170:             ;  ; Return to Supervisor Mode 
00000170: E10F0000    ;     MRS     R0, CPSR                      ; Read Current Status of CPSR
00000174: E3C0001F    ;     BIC     R0, R0, #System_Mode_Bit_Mask ; Clears Mode field of CPSR
00000178: E3800013    ;     ORR     R0, R0, #Super_Mode           ; Append Supervisor Mode to CPSR
0000017C: E121F000    ;     MSR     CPSR_c, R0                    ; Updates the CPSR
00000180:             ;  ;
00000180:             ; ;
00000180:             ; ; Initialise first user process which is always terminal handler 
00000180: E28F0A01    ;    ADRL     R0, Terminal_Handler_Process
00000184: E2800000    ; 
00000188: E28F102C    ;    ADRL     R1, current_process
0000018C: E5010000    ;    STR      R0, [R1]
00000190:             ;    ;ADRL     R0, HelloWorld_Handler_Process 
00000190: E590E008    ;    LDR      R14, [R0, #process_constructor]
00000194:             ;    ; No need to preserve flags so this makes it easier
00000194: E3A00050    ;    MOV      R0, #User_Mode_With_Int
00000198: E161F000    ;    MSR      SPSR_c, R0 
0000019C: E1B0F00E    ;    MOVS     PC, R14 
000001A0:             ; 
000001A0:             ; ; Loads Kernal Constants 
000001A0:             ; GET     kernel_constants.s 
000001A0:             ; ; This file holds all of the constants used by the kernal
000001A0:             ; ; Constants for diffe
000001A0:             ; IRQ_Mode                    EQU &12         ; Interrupt Mode
000001A0:             ; Super_Mode                  EQU &13         ; Supervisor Mode
000001A0:             ; System_Mode_Bit_Mask        EQU &1F ; Used to clear the are that determines system mode
000001A0:             ; User_Mode_With_Int          EQU &50
000001A0:             ; 
000001A0:             ; ; SVC call Constants 
000001A0:             ; Print_String_SVC            EQU &0 
000001A0:             ; Release_LCD_SVC             EQU &4
000001A0:             ; LED_SVC                     EQU &8 
000001A0:             ; Transmit_SVC                EQU &C
000001A0:             ; Start_Process_SVC           EQU &10
000001A0:             ; ;EQU &0 
000001A0:             ; ;EQU &4
000001A0:             ; ;EQU &8
000001A0:             ; ;EQU &C 
000001A0:             ; ;EQU &10
000001A0:             ; ;EQU &14
000001A0:             ; Port_Area                   EQU &10000000
000001A0:             ; Port_A                      EQU &0 
000001A0:             ; Port_B                      EQU &4
000001A0:             ; 
000001A0:             ; ; LCD constants 
000001A0:             ; RS_Bit                      EQU 0B0000_0010
000001A0:             ; RW_Bit                      EQU 0B0000_0100
000001A0:             ; E_En                        EQU 0B0000_0001
000001A0:             ; LCD_Ready_Status            EQU 0B1000_0000
000001A0:             ; LED_On                      EQU 0B0001_0000
000001A0:             ; 
000001A0:             ; ; Interrupt bits 
000001A0:             ; Interrupt_Receiver          EQU 0b0001_0000
000001A0:             ; Interrupt_Transmit          EQU 0b0010_0000
000001A0:             ; Interrupt_Desired           EQU 0b0001_0001
000001A0:             ; Interrupt_Active_Offset     EQU &1C
000001A0:             ; Interrupt_Alert_Offset      EQU &18
000001A0:             ; Interrupt_Timer_Offset      EQU &0C ; This location holds the value at which the Interrupt will
                      ;  trigger when the timer reaches
000001A0:             ; 
000001A0:             ; Interrupt_Time_Interval     EQU &64 ; time gap for interrupts to occur
000001A0:             ; 
000001A0:             ; ; Loads Kernal Variables 
000001A0:             ; GET     kernel_variables.s
000001A0:             ; ; This file holds all the variables used by the kernal
000001A0:             ; Serial_RxD_Buffer_Address   DEFS &16
000001B8:             ;     Align 
000001B8:             ; Serial_TxD_Buffer_Address   DEFS &1
000001BC:             ;     Align 
000001BC: 00000000    ; current_process             DEFW 0
000001C0:             ;     Align 
000001C0: 00000000    ; sheduler_ready_list_start   DEFW 0 
000001C4:             ;     Align 
000001C4:             ; 
000001C4:             ; ; Loads kernal predefined memeory 
000001C4:             ; GET     kernel_memory.s
000001C4:             ; ; This file includes all predefined memory used by the kernal 
000001C4:             ; 
000001C4:             ; ; Stacks 
000001C4:             ;     Supervisor_Stack_Size   EQU &256
000001C4:             ;     Interrupt_Stack_Size    EQU &256 
000001C4:             ;         Align 
000001C4:             ;     ; Supervisor Stack
000001C4:             ;     Supervisor_Stack_Start  DEFS Supervisor_Stack_Size ; Supervisor Stack
0000041A:             ;     Supervisor_Stack_End
0000041C:             ;         Align
0000041C:             ;     ; Interrupt Stack 
0000041C:             ;     Interrupt_Stack_Start   DEFS Interrupt_Stack_Size ; Interrupt Stack
00000672:             ;     Interrupt_Stack_End
00000674:             ;         Align
00000674:             ; ; Buffers 
00000674:             ;     Serial_RxD_Buffer_Size  EQU &256
00000674:             ;         Align 
00000674:             ;     Serial_TxD_Buffer_Size  EQU &256
00000674:             ;         Align 
00000674:             ; 
00000674:             ;     Serial_RxD_Buffer_Start DEFS Serial_RxD_Buffer_Size
000008CA:             ;     Serial_RxD_Buffer_End
000008CC:             ;         Align 
000008CC:             ; 
000008CC:             ;     Serial_TxD_Buffer_Start DEFS Serial_TxD_Buffer_Size
00000B22:             ;     Serial_TxD_Buffer_End
00000B24:             ;         Align
00000B24:             ; 
00000B24:             ; GET     Kernel_Subroutines/Subroutines_main.s 
00000B24:             ; 
00000B24:             ; GET Setting_Interrupts.s
00000B24:             ; Interrupt_Set 
00000B24:             ; ; this sets the desired interrupt 
00000B24:             ;       ; Enable the desired Interrupts, do not affect other Enabled Interrupts
00000B24: E3A01201    ;     MOV     R1, #Port_Area
00000B28: E5D1201C    ;     LDRB    R2, [R1, #Interrupt_Active_Offset]
00000B2C: E1810000    ;     ORR     R0, R1, R0 ; Enables the desired interrupts without touching those already set
00000B30: E5C1001C    ;     STRB    R0, [R1, #Interrupt_Active_Offset]  ; memory location of enabled interrupts
00000B34: E1A0F00E    ;     MOV     PC, LR
00000B38:             ; 
00000B38:             ; Interrupt_Off 
00000B38:             ; ; this removes the desired interrupt 
00000B38: E3A01201    ;     MOV     R1, #Port_Area
00000B3C: E5D1201C    ;     LDRB    R2, [R1, #Interrupt_Active_Offset]
00000B40: E1C10000    ;     BIC     R0, R1, R0 ; Disable the desired interrupts without touching those already set
00000B44: E5C1001C    ;     STRB    R0, [R1, #Interrupt_Active_Offset]  ; memory location of enabled interrupts
00000B48: E1A0F00E    ;     MOV     PC, LR
00000B4C:             ; 
00000B4C:             ; 
00000B4C:             ; GET Transmit.s
00000B4C:             ; ; This SVC will send what is requested to Serial Transmitter 
00000B4C:             ; ; 
00000B4C:             ; 
00000B4C:             ; ; load control to see if transmitter internal buffer is full 
00000B4C:             ; 
00000B4C:             ; Transmit_word 
00000B4C: E92D4030    ;     PUSH    {R4, R5, LR}
00000B50: E3A04201    ;     MOV     R4, #Port_Area
00000B54: E3A05010    ;     MOV     R5, #&10
00000B58: E7C40005    ;     STRB    R0, [R4, R5]
00000B5C: E8BD8030    ;     POP     {R4, R5, PC}
00000B60:             ; 
00000B60:             ; 
00000B60: E92D407E    ;     PUSH    {R1-R6, LR} 
00000B64: E3A05201    ;     MOV     R5, #Port_Area
00000B68: E3A06014    ;     MOV     R6, #Terminal_Control
00000B6C:             ;     ;LDR     R1, [R5, R6] 
00000B6C:             ;     ;TST     R1, #2
00000B6C:             ;    ; if EQ then hardware buffer is full 
00000B6C:             ;     ;BNE     Transmit_word_send
00000B6C: E1A01000    ;     MOV     R1, R0 
00000B70: E24F0D27    ;     ADRL    R0, Serial_TxD_Buffer_Address
00000B74: E5100000    ;     LDR     R0, [R0]
00000B78: EB0000F4    ;     BL      buffer_put
00000B7C: E3A00020    ;     MOV     R0, #Interrupt_Transmit 
00000B80: EBFFFFE7    ;     BL      Interrupt_Set    
00000B84: E8BD807E    ;     POP     {R1-R6, PC} 
00000B88:             ; 
00000B88:             ; Transmit_word_send
00000B88: E3A06010    ;     MOV     R6, #Terminal_Data
00000B8C: E7850006    ;     STR     R0, [R5, R6]
00000B90: E8BD807E    ;     POP     {R1-R6, PC}     
00000B94:             ; ; if full place on buffer 
00000B94:             ; ; activate interrupt
00000B94:             ; 
00000B94:             ; 
00000B94:             ;  
00000B94:             ; 
00000B94:             ; 
00000B94:             ; GET Contest_Switching.s
00000B94:             ; ; File who does c
00000B94:             ; 
00000B94:             ; Context_Switch
00000B94:             ;     ; Function to check status of sheduler, maybe get the next one here 
00000B94: EA00000C    ;     B       Context_Store
00000B98:             ; Context_Switch_Store_Return
00000B98:             ;     ; no need to protect registers since they will be overwritten later anyway 
00000B98: E24F1F79    ;     ADRL    R1, current_process  
00000B9C: E2411B02    ; 
00000BA0: E5111000    ;     LDR     R1, [R1]
00000BA4: E24F0F7B    ;     ADRL    R0, sheduler_ready_list_start  
00000BA8: E2400B02    ; 
00000BAC: EB000129    ;     BL      linked_list_add
00000BB0: E24F0F7E    ;     ADRL    R0, sheduler_ready_list_start  
00000BB4: E2400B02    ; 
00000BB8: EB00012D    ;     BL      linked_list_get 
00000BBC:             ; 
00000BBC: E24F0F82    ;     ADRL    R0, current_process  
00000BC0: E2400B02    ; 
00000BC4: E5001000    ;     STR     R1, [R0]
00000BC8: EA000009    ;     B Context_Load
00000BCC:             ; 
00000BCC:             ; 
00000BCC:             ; Context_Store 
00000BCC: E96D6001    ;     PUSH    {R0, SP, LR}^
00000BD0: E24F0F87    ;     ADRL    R0, current_process
00000BD4: E2400B02    ; 
00000BD8: E5100000    ;     LDR     R0, [R0] ; get current process handler address 
00000BDC: E590000C    ;     LDR     R0, [R0, #context_switch_pointer]
00000BE0: E9005FFE    ;     STMDB   R0, {R1-R12, LR}
00000BE4: E8BD000E    ;     POP     {R1-R3}
00000BE8: E14F4000    ;     MRS     R4, SPSR
00000BEC: E880001E    ;     STMIA   R0, {R1-R4}
00000BF0: EAFFFFE8    ;     B Context_Switch_Store_Return 
00000BF4:             ; 
00000BF4:             ; Context_Load
00000BF4: E24F0D29    ;     ADRL    R0, current_process
00000BF8: E5100000    ;     LDR     R0, [R0] ; get current process handler address 
00000BFC: E590000C    ;     LDR     R0, [R0, #context_switch_pointer]
00000C00: E891001D    ;     LDMIA   R1, {R0, R2, R3, R4}
00000C04: E16FF004    ;     MSR     SPSR, R4
00000C08: E92D000C    ;     PUSH    {R2, R3}
00000C0C: E8FD6000    ;     POP     {SP, LR}^
00000C10: E9519FFE    ;     LDMDB   R1, {R1-R12, PC}^
00000C14:             ; 
00000C14:             ; GET memory_management.s
00000C14:             ; ; This file contains the functions for allocating and freeing memoery requested by user process
                      ; es from the system 
00000C14:             ; 
00000C14:             ; ; Function to request memory 
00000C14:             ; ; Input 
00000C14:             ; ;   size of memory requested 
00000C14:             ;     ; divide memory request by 512 
00000C14:             ; 
00000C14:             ; ; function to release memeory 
00000C14:             ; 
00000C14:             ; ; paging info 
00000C14:             ; 
00000C14:             ; memory_request
00000C14:             ; ; Function to request memory 
00000C14:             ; ; Registers used 
00000C14:             ; ;   R4, holds address page 
00000C14:             ; ;   R5, counter 
00000C14:             ; ;   R6, pointer of start of scan
00000C14:             ; ; Input 
00000C14:             ; ;   R0 number of pages requested
00000C14:             ;     
00000C14:             ;     ; look in table if amout of pages is avaiable
00000C14: E92D40F0    ;     PUSH    {R4-R7, LR}
00000C18: E28F40D0    ;     ADRL    R4, Page_Table_Start
00000C1C: E3A05000    ;     MOV     R5, #0
00000C20: E28F60C8    ;     ADRL    R6, Page_Table_Start
00000C24:             ;     ; Load state of page 
00000C24:             ; Reserve_Space_loop
00000C24: E5141000    ;     LDR    R1, [R4]
00000C28:             ;     ; if null increment counter
00000C28: E3510000    ;     CMP     R1, #0 
00000C2C: 02855001    ;     ADDEQ   R5, R5, #1
00000C30: 13A05000    ;     MOVNE   R5, #0
00000C34: 01550000    ;     CMPEQ   R5, R0          
00000C38: 0A000002    ;     BEQ     Reserve_Page
00000C3C: E2844004    ;     ADD     R4, R4, #4
00000C40: 1AFFFFF7    ;     BNE     Reserve_Space_loop 
00000C44: EAFFFFFE    ;     he b he
00000C48:             ; Reserve_Page 
00000C48: E3A07000    ;     MOV     R7, #0 
00000C4C: E24F5FA6    ;     ADRL    R5, current_process 
00000C50: E2455B02    ; 
00000C54: E5155000    ;     LDR     R5, [R5]
00000C58:             ; Reserve_Page_Loop
00000C58: E5045000    ;     STR     R5, [R4]
00000C5C: E5146000    ;     LDR     R6, [R4]
00000C60: E2877001    ;     ADD     R7, R7, #1
00000C64: E1570000    ;     CMP     R7, R0 
00000C68: 12444004    ;     SUBNE   R4, R4, #4
00000C6C: 1AFFFFF9    ;     BNE     Reserve_Page_Loop
00000C70: E1A00004    ;     MOV     R0, R4
00000C74: E1A00480    ;     LSL     R0, R0, #9
00000C78: E8BD80F0    ;     POP     {R4-R7, PC}
00000C7C:             ; 
00000C7C:             ; 
00000C7C:             ; memory_free 
00000C7C:             ; ; Inputs 
00000C7C:             ; ;   R0 pointer to start of memory to free 
00000C7C:             ; ;   R1 number of pages being freed 
00000C7C:             ; ; Outputs
00000C7C:             ; ;   R0 1 on success and 0 on failure
00000C7C:             ;     
00000C7C: E92D4030    ;     PUSH    {R4-R5, LR}
00000C80: E1A004A0    ;     LSR     R0, R0, #9
00000C84: E3A0E000    ;     MOV     R14, #0 
00000C88: E24F4FB5    ;     ADRL    R4, current_process
00000C8C: E2444B02    ; 
00000C90: E5144000    ;     LDR     R4, [R4]
00000C94:             ; memory_free_loop
00000C94: E5105000    ;     LDR     R5, [R0]
00000C98: E1550004    ;     CMP     R5, R4
00000C9C: 1A000006    ;     BNE     memory_free_failure
00000CA0: E500E000    ;     STR     R14, [R0]
00000CA4: E2411001    ;     SUB     R1, R1, #1 
00000CA8: E3510000    ;     CMP     R1, #0 
00000CAC: 12800004    ;     ADDNE   R0, R0, #4
00000CB0: 1AFFFFF7    ;     BNE     memory_free_loop
00000CB4: E3A00000    ;     MOV     R0, #0 
00000CB8: E8BD8030    ;     POP     {R4-R5, PC}
00000CBC:             ; 
00000CBC:             ; memory_free_failure
00000CBC: E3A00001    ;     MOV     R0, #1 
00000CC0: E8BD8030    ;     POP     {R4-R5, PC}
00000CC4:             ; 
00000CC4:             ; memory_clean 
00000CC4:             ; ; Input 
00000CC4:             ; ;   R0 - Process ID
00000CC4: E92D40F0    ;     PUSH    {R4-R7, LR}
00000CC8: E28F4020    ;     ADRL    R4, Page_Table_Start
00000CCC: E28F505C    ;     ADRL    R5, Page_Table_End
00000CD0: E3A06000    ;     MOV     R6, #0
00000CD4:             ; memory_clean_loop
00000CD4: E5147000    ;     LDR     R7, [R4]
00000CD8: E1570000    ;     CMP     R7, R0
00000CDC: 05046000    ;     STREQ   R6, [R4]
00000CE0: E1540005    ;     CMP     R4, R5
00000CE4: 12844004    ;     ADDNE   R4, R4, #4 
00000CE8: 1AFFFFF9    ;     BNE     memory_clean_loop
00000CEC: E8BD80F0    ;     POP     {R4-R7, PC}
00000CF0:             ; 
00000CF0:             ; 
00000CF0:             ; 
00000CF0:             ; 
00000CF0:             ; Page_Table_Start 
00000CF0: 00000000    ;     DEFW 0 
00000CF4: 00000000    ;     DEFW 0 
00000CF8: 00000000    ;     DEFW 0 
00000CFC: 00000000    ;     DEFW 0 
00000D00: 00000000    ;     DEFW 0 
00000D04: 00000000    ;     DEFW 0 
00000D08: 00000000    ;     DEFW 0 
00000D0C: 00000000    ;     DEFW 0 
00000D10: 00000000    ;     DEFW 0 
00000D14: 00000000    ;     DEFW 0 
00000D18: 00000000    ;     DEFW 0 
00000D1C: 00000000    ;     DEFW 0 
00000D20: 00000000    ;     DEFW 0 
00000D24: 00000000    ;     DEFW 0 
00000D28: 00000000    ;     DEFW 0 
00000D2C: 00000000    ;     DEFW 0 
00000D30:             ; Page_Table_End
00000D30:             ; 
00000D30:             ; GET sheduler.s
00000D30:             ; ; this file contains the sheduler for the OS 
00000D30:             ; 
00000D30:             ; 
00000D30:             ; Shedule_Add 
00000D30:             ; ; find the last item on the lest 
00000D30: E92D4000    ;     PUSH    {LR}
00000D34:             ; 
00000D34:             ;     ; Check that the current process is the terminal handler 
00000D34: E24F4D2E    ;     ADRL    R4, current_process
00000D38: E5144000    ;     LDR     R4, [R4]
00000D3C: E28F5044    ;     ADRL    R5, Terminal_Handler_Process
00000D40: E2855B01    ; 
00000D44: E1540005    ;     CMP     R4, R5                      ; This is so that user level process cannot add to the 
                      ; sheduler with the exheption of terminal handler
00000D48: 1A000007    ;     BNE     Shedule_Add_Prohibited
00000D4C:             ; 
00000D4C:             ; Shedule_Add_kernal
00000D4C: E24FEFE5    ;     ADRL    R14, sheduler_ready_list_start
00000D50: E24EEB02    ; 
00000D54:             ; Shedule_Add_Loop    
00000D54: E59EE000    ;     LDR     R14, [R14, #pointer_next]
00000D58: E35E0000    ;     CMP     R14, #0 
00000D5C: 1AFFFFFC    ;     BNE     Shedule_Add_Loop
00000D60: E24FEFEA    ;     ADRL    R14, sheduler_ready_list_start    
00000D64: E24EEB02    ; 
00000D68: E58E0000    ;     STR     R0, [R14, #pointer_next]
00000D6C:             ; Shedule_Add_Prohibited
00000D6C: E8BD8000    ;     POP     {PC}
00000D70:             ; 
00000D70:             ; 
00000D70:             ; Shedule_Get_Next 
00000D70:             ; ; check if there is anything else on the shedule 
00000D70: E92D0010    ;     PUSH    {R4}
00000D74: E24F4FEF    ;     ADRL    R4, sheduler_ready_list_start
00000D78: E2444B02    ; 
00000D7C: E5144000    ;     LDR     R4, [R4]
00000D80: E3540000    ;     CMP     R4, #0
00000D84: 0A000001    ;     BEQ     Shedule_Empty
00000D88: E8BD0010    ;     POP     {R4}
00000D8C: EAFFFF80    ;     B       Context_Switch
00000D90:             ;     ; 
00000D90:             ; Shedule_Empty
00000D90: E8BD0010    ;     POP     {R4}
00000D94: E1B0F00E    ;     MOVS    PC, LR
00000D98:             ; 
00000D98:             ; ;
00000D98:             ; 
00000D98:             ; GET Kernal_LED.s
00000D98:             ; ; this file contains the supervsior level function needed to drive the LEDS 
00000D98:             ; 
00000D98: 00000000    ; LED_Owner DEFW 0
00000D9C:             ; 
00000D9C:             ; Set_LED 
00000D9C:             ;     ;Check owenership of LEDS 
00000D9C: E92D4030    ;     PUSH    {R4, R5, LR}
00000DA0: E24F4010    ;     ADRL    R4, LED_Owner
00000DA4: E5144000    ;     LDR     R4, [R4]
00000DA8: E3540000    ;     CMP     R4, #0
00000DAC:             ;     ; if not reserve it 
00000DAC: 0A00000E    ;     BEQ     Reserve_LED
00000DB0:             ;     ; check if the proccess has reserved the LCD 
00000DB0: E24F5FFF    ;     ADRL    R5, current_process
00000DB4: E2455B02    ; 
00000DB8: E5155000    ;     LDR     R5, [R5]
00000DBC: E1540005    ;     CMP     R4, R5
00000DC0: 1A00000F    ;     BNE     LEDInUse
00000DC4:             ; 
00000DC4:             ; Set_LED_Main
00000DC4: E92D0040    ;     PUSH    {R6}
00000DC8: E3A04201    ;     MOV     R4, #Port_Area
00000DCC: E5945004    ;     LDR     R5, [R4, #Port_B]
00000DD0:             ; 
00000DD0:             ;     ; Enable LEDs 
00000DD0: E2055010    ;     AND     R5, R5, #LED_On
00000DD4: E5845004    ;     STR     R5, [R4, #Port_B]
00000DD8:             ;     ; update LEDS 
00000DD8: E5146000    ;     LDR     R6, [R4]
00000DDC: E0066000    ;     AND     R6, R6, R0 
00000DE0: E0266001    ;     EOR     R6, R6, R1
00000DE4: E5846000    ;     STR     R6, [R4, #Port_A]
00000DE8: E8BD8070    ;     POP     {R4, R5, R6, PC}
00000DEC:             ; 
00000DEC:             ; Reserve_LED
00000DEC: E28F4018    ;     ADRL    R4, LCD_Owner
00000DF0: E24F503C    ;     ADRL    R5, current_process
00000DF4: E2455B03    ; 
00000DF8: E5155000    ;     LDR     R5, [R5]
00000DFC: E5045000    ;     STR     R5, [R4]
00000E00: EAFFFFEF    ;     B       Set_LED_Main
00000E04:             ; LEDInUse  
00000E04: E3A02001    ;     MOV     R2, #1
00000E08: E8BD8030    ;     POP     {R4, R5, PC}
00000E0C:             ; 
00000E0C:             ; GET peripherals.s
00000E0C:             ; ; This file contains the function responsible for accessing the peripherals on the Lab board 
00000E0C:             ; 
00000E0C:             ; ; variables 
00000E0C:             ; 
00000E0C: 00000000    ; LCD_Owner DEFW 0
00000E10:             ; 
00000E10:             ; SVC_printChar
00000E10: E92D4030    ;     PUSH    {R4,R5, LR}
00000E14: E3A02000    ;     MOV     R2, #0
00000E18:             ;     ; code to check if the LCD is reserved 
00000E18: E24F4014    ;     ADRL    R4, LCD_Owner
00000E1C: E5144000    ;     LDR     R4, [R4]
00000E20: E3540000    ;     CMP     R4, #0
00000E24:             ;     ; if not reserve it 
00000E24: 0A00002A    ;     BEQ     Reserve_LCD
00000E28:             ;     ; check if the proccess has reserved the LCD 
00000E28: E24F5074    ;     ADRL    R5, current_process
00000E2C: E2455B03    ; 
00000E30: E5155000    ;     LDR     R5, [R5]
00000E34: E1540005    ;     CMP     R4, R5
00000E38: 1A00002B    ;     BNE     LCDInUse
00000E3C:             ; 
00000E3C:             ;     ; else return failure to print 
00000E3C:             ; printChar_Status
00000E3C:             ;     ; check if LCD is ready 
00000E3C:             ;     ; Set LCD to get ready state of LCD 
00000E3C: E3A04201    ;     MOV     R4, #Port_Area
00000E40: E5D45004    ;     LDRB    R5, [R4, #Port_B]
00000E44: E3C55002    ;     BIC     R5, R5, #RS_Bit      ; Sets Port_A In/Out to control Register
00000E48: E3855004    ;     ORR     R5, R5, #RW_Bit      ; Sets to Read from LCD
00000E4C: E3C55010    ;     BIC     R5, R5, #LED_On
00000E50: E5C45004    ;     STRB    R5, [R4, #Port_B]     ; Sends updated instructions to Port_B
00000E54:             ; 
00000E54:             ;     ; Set E High  
00000E54: E5D45004    ;     LDRB    R5, [R4, #Port_B]     ; Gets value of Port_B and stores it in R4
00000E58: E3855001    ;     ORR     R5, R5, #E_En         ; Sets LCD Enable Bus high
00000E5C: E5C45004    ;     STRB    R5, [R4, #Port_B]     ; Sends updated instructions to Port_B
00000E60:             ; 
00000E60:             ;     ; Get status of LCD 
00000E60: E5D45000    ;     LDRB    R5, [R4, #Port_A]     ; Get Status of LCD
00000E64: E2055080    ;     AND     R5, R5, #LCD_Ready_Status      
00000E68:             ; 
00000E68:             ;     ; set E Low 
00000E68: E5D45004    ;     LDRB    R5, [R4, #Port_B]     ; Gets value of Port_B and stores it in R4
00000E6C: E3C55001    ;     BIC     R5, R5, #E_En         ; Sets LCD Enable Bus high
00000E70: E2055010    ;     AND     R5, R5, #LED_On
00000E74: E5C45004    ;     STRB    R5, [R4, #Port_B]     ; Sends updated instructions to Port_B
00000E78:             ; 
00000E78:             ;     ; if not return waiting loop 
00000E78: E3550000    ;     CMP     R5, #0
00000E7C: 13A01001    ;     MOVNE   R1, #1
00000E80: 18BD8030    ;     LDMNEFD SP!, {R4-R5, PC}
00000E84:             ;     ; if ready 
00000E84:             ; 
00000E84:             ;     ; print char
00000E84:             ; printChar_s
00000E84:             ;     ; Save state of current LEDS 
00000E84: E92D00C0    ;     PUSH    {R6,R7} 
00000E88: E5D46000    ;     LDRB    R6, [R4, #Port_A]
00000E8C:             ; 
00000E8C:             ; 
00000E8C:             ;     ; get LCD ready to recieve char
00000E8C: E5D45004    ;     LDRB    R5, [R4, #Port_B]
00000E90: E1A07005    ;     MOV     R7, R5              ; Saves state of interface before sending char
00000E94: E3855002    ;     ORR     R5, R5, #RS_Bit      ; Sets Port_A In/Out to control Register
00000E98: E3C55010    ;     BIC     R5, R5, #LED_On
00000E9C: E3C55004    ;     BIC     R5, R5, #RW_Bit      ; Sets to Read from LCD
00000EA0: E5C45004    ;     STRB    R5, [R4, #Port_B]     ; Sends updated instructions to Port_B
00000EA4:             ;     ; Sent Character to be sent 
00000EA4: E5C40000    ;     STRB    R0, [R4, #Port_A]     ; send character to LCD
00000EA8:             ; 
00000EA8:             ;     ; Pluse E_En
00000EA8:             ;     ; Set E High  
00000EA8: E5D45004    ;     LDRB    R5, [R4, #Port_B]     ; Gets value of Port_B and stores it in R4
00000EAC: E3855001    ;     ORR     R5, R5, #E_En         ; Sets LCD Enable Bus high
00000EB0: E5C45004    ;     STRB    R5, [R4, #Port_B]     ; Sends updated instructions to Port_B
00000EB4:             ; 
00000EB4:             ;     ; set E Low 
00000EB4: E5D45004    ;     LDRB    R5, [R4, #Port_B]     ; Gets value of Port_B and stores it in R4
00000EB8: E3C55001    ;     BIC     R5, R5, #E_En         ; Sets LCD Enable Bus LOW
00000EBC: E5C45004    ;     STRB    R5, [R4, #Port_B]     ; Sends updated instructions to Port_B
00000EC0:             ;     ; Restore state of interface and LEDS if they had been set
00000EC0: E5C46000    ;     STRB    R6, [R4, #Port_A]
00000EC4: E5C47004    ;     STRB    R7, [R4, #Port_B]
00000EC8: E3A01000    ;     MOV     R1, #0
00000ECC: E3A02000    ;     MOV     R2, #0
00000ED0: E8BD80F0    ;     POP     {R4-R7,PC} 
00000ED4:             ; 
00000ED4:             ; 
00000ED4:             ; Reserve_LCD
00000ED4: E24F40D0    ;     ADRL    R4, LCD_Owner
00000ED8: E24F5F49    ;     ADRL    R5, current_process
00000EDC: E2455B03    ; 
00000EE0: E5155000    ;     LDR     R5, [R5]
00000EE4: E5045000    ;     STR     R5, [R4]
00000EE8: EAFFFFD3    ;     B printChar_Status
00000EEC:             ; 
00000EEC:             ; 
00000EEC:             ; LCDInUse
00000EEC: E3A02001    ;     MOV     R2, #1 
00000EF0: E8BD4030    ;     POP     {R4,R5, LR}
00000EF4:             ; 
00000EF4:             ; ; Function 2 
00000EF4:             ; ; send something to a peripheral 
00000EF4:             ; 
00000EF4:             ; Release_LCD_Ownership 
00000EF4:             ;     ; this function releases the ownership of the lcd 
00000EF4: E92D4030    ;     PUSH    {R4, R5, LR}
00000EF8:             ;     ; first it checks that this process is the current owner of the LCD 
00000EF8: E24F40F4    ;     ADRL    R4, LCD_Owner 
00000EFC: E5144000    ;     LDR     R4, [R4]
00000F00: E24F5F53    ;     ADRL    R5, current_process
00000F04: E2455B03    ; 
00000F08: E5155000    ;     LDR     R5, [R5]    
00000F0C: E1540005    ;     CMP     R4, R5      ; make sure current process is the owner 
00000F10: 13A00001    ;     MOVNE   R0, #1
00000F14: 18BD8030    ;     LDMNEFD SP!, {R4-R5, PC} 
00000F18: E24F4F45    ;     ADRL    R4, LCD_Owner
00000F1C: E3A05000    ;     MOV     R5, #0 
00000F20: E5045000    ;     STR     R5, [R4]
00000F24: E8BD8030    ;     POP     {R4, R5, PC}
00000F28:             ; 
00000F28:             ; Peripheral 
00000F28:             ; 
00000F28:             ; 
00000F28:             ; 
00000F28:             ; GET universal/universal_main.s
00000F28:             ; ; This file is used to enable an easy load of all universal files
00000F28:             ; 
00000F28:             ; GET universal_constants.s 
00000F28:             ; ; Constants used by all modes
00000F28:             ; 
00000F28:             ; ; SVC Codes
00000F28:             ; 
00000F28:             ; ;EQU &0 
00000F28:             ; ;EQU &4
00000F28:             ; ;EQU &8
00000F28:             ; ;EQU &C 
00000F28:             ; ;EQU &10
00000F28:             ; ;EQU &14
00000F28:             ; 
00000F28:             ; Word_Size           EQU &4
00000F28:             ; 
00000F28:             ; Terminal_Data           EQU &10
00000F28:             ; Terminal_Control        EQU &14
00000F28:             ; 
00000F28:             ; GET data_structures/buffer.s
00000F28:             ; ; Buffer Data Structure 
00000F28:             ; ; Place in tail 
00000F28:             ; ; Retriveve from head
00000F28:             ; struct
00000F28:             ; buffer_start    word 
00000F28:             ; buffer_end      word 
00000F28:             ; buffer_head     word
00000F28:             ; buffer_tail     word 
00000F28:             ; buffer_waiter   word
00000F28:             ; buffer_data     alias
00000F28:             ;     struct_align  
00000F28:             ; 
00000F28:             ; ; Functions 
00000F28:             ; ; Initialise Buffer 
00000F28:             ; buffer_initialise
00000F28:             ; ; This function intialises a buffer data structure 
00000F28:             ; ; Inputs 
00000F28:             ; ;   R0 buffer starting address 
00000F28:             ; ;   R1 buffer size in words 
00000F28:             ; ;   
00000F28: E92D4010    ;     PUSH    {R4, LR}
00000F2C: E3A02000    ;     MOV     R2, #0
00000F30: E2804014    ;     ADD     R4, R0, #buffer_data ; this calculates the start of buffer memory 
00000F34: E5804000    ;     STR     R4, [R0, #buffer_start] ; stores start of buffer in start of buffer offset 
00000F38: E5804008    ;     STR     R4, [R0, #buffer_head]
00000F3C: E580400C    ;     STR     R4, [R0, #buffer_tail]
00000F40: E5802010    ;     STR     R2, [R0, #buffer_waiter]
00000F44: E0804001    ;     ADD     R4, R0, R1  
00000F48: E5804004    ;     STR     R4, [R0, #buffer_end]
00000F4C: E8BD8010    ;     POP     {R4, PC}
00000F50:             ; 
00000F50:             ; ; Place into buffer
00000F50:             ; buffer_put 
00000F50:             ; ; This function places a word into the buffer 
00000F50:             ; ; Inputs 
00000F50:             ; ;   R0 Address of where the buffer starts 
00000F50:             ; ;   R1 Word to store 
00000F50:             ; ; OutPuts 
00000F50:             ; ;   R0 - Returns 0 when it is full 
00000F50:             ; 
00000F50: E92D40F0    ;     PUSH    {R4-R7, LR}
00000F54: E5904008    ;     LDR     R4, [R0, #buffer_head]
00000F58: E590500C    ;     LDR     R5, [R0, #buffer_tail] 
00000F5C:             ; ;   Check if buffer is full 
00000F5C:             ; ;       Check if head is 1 word infront of tail 
00000F5C: E2856014    ;     ADD     R6, R5, #buffer_data
00000F60: E1560004    ;     CMP     R6, R4
00000F64: 0A00000A    ;     BEQ     buffer_full
00000F68:             ; ;       check if tail is at bottom of buffer and if so if tail is at base 
00000F68: E5906004    ;     LDR     R6, [R0, #buffer_end]
00000F6C: E1560005    ;     CMP     R6, R5
00000F70: 05907000    ;     LDREQ   R7, [R0, #buffer_start]
00000F74: 01540007    ;     CMPEQ   R4, R7 
00000F78: 0A000005    ;     BEQ     buffer_full 
00000F7C:             ; 
00000F7C:             ; ;   place in buffer 
00000F7C: E5051000    ;     STR     R1, [R5]
00000F80:             ;     ; if tail is at bottom of register move to top 
00000F80: E1560005    ;     CMP     R6, R5 
00000F84: 05905000    ;     LDREQ   R5, [R0, #buffer_start] ; 
00000F88:             ;     ; else add 4 
00000F88: 12855004    ;     ADDNE   R5, R5, #Word_Size
00000F8C:             ;     ; and save new tail pointer address 
00000F8C: E580500C    ;     STR     R5, [R0, #buffer_tail]
00000F90: E8BD80F0    ;     POP     {R4-R7, PC}
00000F94:             ; 
00000F94:             ; ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
00000F94:             ; buffer_full
00000F94: E3A00000    ;     MOV     R0, #0 
00000F98: E8BD8070    ;     POP     {R4-R6, PC}
00000F9C:             ; 
00000F9C:             ; buffer_get 
00000F9C:             ; ; This function retrieves a word from the buffer 
00000F9C:             ; ; Inputs 
00000F9C:             ; ;   R0 Address of where the buffer starts 
00000F9C:             ; ; Outputs 
00000F9C:             ; ;   R0 Word retrieved, 0 when empty
00000F9C: E92D4070    ;     PUSH    {R4-R6, LR}
00000FA0: E5904008    ;     LDR     R4, [R0, #buffer_head]
00000FA4: E590500C    ;     LDR     R5, [R0, #buffer_tail]  
00000FA8:             ; 
00000FA8:             ;     ; Check if buffer is empty 
00000FA8: E1540005    ;     CMP     R4, R5 
00000FAC: 0A000008    ;     BEQ     buffer_empty 
00000FB0:             ; 
00000FB0:             ;     ; done here because loads can take time so reduces possible delay 
00000FB0: E5906004    ;     LDR     R6, [R0, #buffer_end]
00000FB4:             ;  ; if not retrieve word 
00000FB4: E5141000    ;     LDR     R1, [R4]
00000FB8:             ; 
00000FB8:             ;     ; check if head is at bottom of buffer 
00000FB8: E5906004    ;     LDR     R6, [R0, #buffer_end]
00000FBC: E1540006    ;     CMP     R4, R6 
00000FC0:             ;     ; if at bottom load buffer start address into register holding buffer head pointer 
00000FC0: 05904000    ;     LDREQ   R4, [R0, #buffer_start]
00000FC4: 12844004    ;     ADDNE   R4, R4, #&4
00000FC8: E5804008    ;     STR     R4, [R0, #buffer_head]
00000FCC: E1A00001    ;     MOV     R0, R1
00000FD0: E8BD8070    ;     POP     {R4-R6, PC}
00000FD4:             ; 
00000FD4:             ; 
00000FD4:             ; ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
00000FD4:             ; buffer_empty 
00000FD4: E3A00000    ;     MOV     R0, #0 
00000FD8: E8BD8070    ;     POP     {R4-R6, PC}
00000FDC:             ; 
00000FDC:             ; GET data_structures/process.s
00000FDC:             ; ; Data Structure called processes 
00000FDC:             ; struct 
00000FDC:             ; pointer_next           word 
00000FDC:             ; process_id             word 
00000FDC:             ; process_constructor    word
00000FDC:             ; DEFS        &64
00001040:             ; context_switch_pointer  alias
00001040:             ; DEFS        &16 
00001056:             ; 
00001056:             ;     struct_align
00001058:             ; Align 
00001058:             ; 
00001058:             ; GET data_structures/linked_list.s
00001058:             ; ; Linked List data Structure 
00001058:             ; 
00001058:             ; struct 
00001058:             ; pointer_next    word 
00001058:             ; data            word  
00001058:             ;     struct_align
00001058:             ; 
00001058:             ; ; Functions 
00001058:             ; ; Add Item to list 
00001058:             ; linked_list_add
00001058:             ; ; Function for adding an item to the list
00001058:             ; ; Inputs 
00001058:             ; ;   R0 Address of start of list     
00001058: E92D4010    ;     PUSH    {R4, LR} 
0000105C:             ; linked_list_add_loop
0000105C: E5904000    ;     LDR     R4, [R0, #pointer_next]
00001060:             ;     ; See if its null 
00001060: E3540000    ;     CMP     R4, #&0 
00001064: 11A00004    ;     MOVNE   R0, R4 
00001068: 1AFFFFFB    ;     BNE     linked_list_add_loop
0000106C: E5841000    ;     STR     R1, [R4, #pointer_next]
00001070: E8BD8010    ;     POP     {R4, PC}
00001074:             ; 
00001074:             ; linked_list_get 
00001074:             ; ; Inputs
00001074:             ; ;   R0 pointer to linked list starting location   
00001074:             ; ; Outputs 
00001074:             ; ;   R1 pointer to first item ob list
00001074: E92D4010    ;     PUSH    {R4, LR}    
00001078: E5101000    ;     LDR     R1, [R0]
0000107C: E3510000    ;     CMP     R1, #&0 
00001080: 15914000    ;     LDRNE   R4, [R1, #pointer_next]
00001084: 15004000    ;     STRNE   R4, [R0]
00001088: 11A01004    ;     MOVNE   R1, R4
0000108C: E8BD8010    ;     POP     {R4, PC}
00001090:             ; 
00001090:             ; ; Remove Item to List 
00001090:             ; linked_list_remove 
00001090:             ; ; Input 
00001090:             ; ;   R1 value of data for item removed    
00001090:             ; ; Output 
00001090:             ; ;   R0 if 0 then it failed 
00001090: E92D4010    ;     PUSH    {R4, LR}
00001094: EB000006    ;     BL      linked_list_find 
00001098:             ;     ; check if item was found 
00001098: E3500000    ;     CMP R0, #0 
0000109C: 0A000003    ;     BEQ linked_list_remove_failed
000010A0:             ;     ; update pointer #
000010A0: E5904000    ;     LDR     R4, [R0, #pointer_next]
000010A4: E5814000    ;     STR     R4, [R1, #pointer_next]
000010A8:             ;     
000010A8:             ;     ; Blanks pointer next of desired item 
000010A8: E3A04000    ;     MOV     R4, #0 
000010AC: E5804000    ;     STR     R4, [R0, #pointer_next]
000010B0:             ; linked_list_remove_failed
000010B0: E8BD8010    ;     POP     {R4, PC}
000010B4:             ; 
000010B4:             ; 
000010B4:             ; linked_list_find 
000010B4:             ; ; Function find item by data 
000010B4:             ; ; Input
000010B4:             ; ; R0 Pointer to start of linked list  
000010B4:             ; ; R1 Data of item function is looking for 
000010B4:             ; ; Ouput
000010B4:             ; ; R0 pointer to desired item 
000010B4:             ; ; R1 Pointer to preseding Item 
000010B4: E1A04000    ;     MOV     R4, R0
000010B8: E1A05000    ;     MOV     R5, R0
000010BC:             ; linked_list_find_loop       
000010BC:             ;     ; List is empty 
000010BC: E5946000    ;     LDR     R6, [R4, #pointer_next]
000010C0: E3560000    ;     CMP     R6, #0 ; check if you reached end of line 
000010C4: 0A000009    ;     BEQ     linked_list_find_end_of_list
000010C8: E5947004    ;     LDR     R7, [R4, #data]
000010CC: E1570001    ;     CMP     R7, R1
000010D0: 0A000003    ;     BEQ     linked_list_find_item_found
000010D4: E1A05004    ;     MOV     R5, R4
000010D8: E1A04006    ;     MOV     R4, R6
000010DC:             ;     ; check if item is desired item  
000010DC: EAFFFFF6    ;     B       linked_list_find_loop   
000010E0: E8BD81F0    ;     POP     {R4-R8, PC}   
000010E4:             ; 
000010E4:             ; linked_list_find_item_found
000010E4: E1A00004    ;     MOV     R0, R4
000010E8: E1A01005    ;     MOV     R1, R5
000010EC: E8BD81F0    ;     POP     {R4-R8, PC} 
000010F0:             ; 
000010F0:             ; linked_list_find_end_of_list
000010F0: E3A00000    ;     MOV R0, #0 
000010F4: E8BD81F0    ;     POP     {R4-R8, PC} 
000010F8:             ; 
000010F8:             ; GET process_list.s
000010F8:             ; ; List of all Processes
000010F8:             ; Idle 
000010F8: 00000000    ;     DEFW 0 ; pointer next
000010FC: 00000000    ;     DEFW 0  ; process Id 
00001100: 00001704    ;     DEFW Idle_Constructor
00001104: 00000000    ;     DEFW 0 ; process Stack pointer 
00001108:             ;     DEFS &80 
00001188:             ;     Align
00001188:             ; 
00001188:             ; Terminal_Handler_Process
00001188: 00000000    ;     DEFW 0 
0000118C: 00000001    ;     DEFW 1
00001190: 0000139C    ;     DEFW Terminal_Handler_Constructor
00001194: 00000000    ;     DEFW 0 
00001198:             ;     DEFS &80 
00001218:             ;     Align
00001218:             ; 
00001218:             ; Lights_Handler_Process 
00001218: 00000000    ;     DEFW 0 
0000121C: 00000002    ;     DEFW 2
00001220: 00001384    ;     DEFW Lights_Handler_Constructor 
00001224: 00000000    ;     DEFW 0 
00001228:             ;     DEFS &80 
000012A8:             ;     Align
000012A8:             ; 
000012A8:             ; HelloWorld_Handler_Process 
000012A8: 00000000    ;     DEFW 0 
000012AC: 00000003    ;     DEFW 3
000012B0: 0000143C    ;     DEFW HelloWorld_Handler_Constructor 
000012B4: 00000000    ;     DEFW 0 
000012B8:             ;     DEFS &80 
00001338:             ;     Align
00001338:             ; 
00001338:             ; GET     malloc.s
00001338:             ; ; this file contains the libary functions malloc and free 
00001338:             ; 
00001338:             ; ; This function is used by a user process to reserve memory 
00001338:             ; ; Inputs 
00001338:             ; ;   R0 - pointer to list of free memory 
00001338:             ; ;   R1 - Amount of memeory requested in words 
00001338:             ; malloc 
00001338: E92D41F0    ;     PUSH    {R4-R8,LR} 
0000133C:             ;     ; Check if a list of free memeory was provided 
0000133C: E3A04000    ;     MOV R4, #0 
00001340: E1500004    ;     CMP R0, R4 
00001344:             ;     ;BEQ 
00001344:             ; 
00001344: E8BD81F0    ;     POP     {R4-R8, PC}
00001348:             ; 
00001348:             ; 
00001348:             ; GET     printString.s
00001348:             ; ;this file contains the print string function 
00001348:             ; ; it take the following inputs 
00001348:             ; ; R1 is the string to be printed 
00001348:             ; ; and returns the following outputs 
00001348:             ; 
00001348:             ; ; Working Registers 
00001348:             ; ; R4 is the pointer to the character to be printed 
00001348:             ; 
00001348:             ; 
00001348:             ; printString 
00001348: E92D4010    ;     PUSH    {R4, LR}
0000134C: E1A04001    ;     MOV     R4, R1
00001350:             ; 
00001350:             ; printStringLoop 
00001350: E5540000    ;     LDRB    R0, [R4]   ; Get next character to be printed
00001354: E2844001    ;     ADD     R4, R4, #1 
00001358: E3500000    ;     CMP     R0, #0 
0000135C: 0A000006    ;     BEQ     print_String_Complete     ; Return to printString Call and restores Registers to be
                      ; fore call
00001360:             ; printCharLoop
00001360: EF000000    ;     SVC     Print_String_SVC        ; needs to be implemented 
00001364: E3510000    ;     CMP     R1, #0          ; loops incase LCD is not ready 
00001368: 1AFFFFFC    ;     BNE     printCharLoop  
0000136C: E3520000    ;     CMP     R2, #0          ; occurs when a print was unsucessful, perhase due to ownership iss
                      ; ues
00001370: 1A000000    ;     BNE     printFailed
00001374: EAFFFFF5    ;     B       printStringLoop
00001378:             ; 
00001378:             ; printFailed
00001378: EAFFFFFE    ;     B printFailed
0000137C:             ; 
0000137C:             ; print_String_Complete
0000137C: EF000004    ;     SVC     Release_LCD_SVC
00001380: E8BD8010    ;     POP     {R4, PC}
00001384:             ; 
00001384:             ; ; print char svc will check if the LCD is ready and if so print otherwise it will return 
00001384:             ; 
00001384:             ; Get user/user_main.s
00001384:             ; ; File to make it easy to load all user files 
00001384:             ; GET     Lights.s 
00001384:             ; ; This file is for using the LEDS 
00001384:             ; Lights_Handler_Constructor
00001384:             ; ; set up stack 
00001384: E28FD0DA    ; ADRL    SP, Lights_Stack_End
00001388: E28DDC02    ; 
0000138C:             ; 
0000138C:             ; ; set and LED 
0000138C:             ; 
0000138C: E3A000D0    ;     MOV     R0, #0b1101_0000 
00001390: E3A01022    ;     MOV     R1, #0b0010_0010
00001394: EF000008    ;     SVC     LED_SVC
00001398:             ; 
00001398: EAFFFFFE    ; lights_loop B lights_loop
0000139C:             ; 
0000139C:             ; ; loop in place 
0000139C:             ; ; Terminal Handler 
0000139C:             ; GET Terminal_Handler.s
0000139C:             ; ; Terminal Handler Process 
0000139C:             ; ; This process handles intake from the terminal and determines how to respond
0000139C:             ; 
0000139C:             ; ;   Register Index 
0000139C:             ;     ; R9  Holds last input character 
0000139C:             ;     ; R10 is used to tell the process if it an echo input or not 1 is echo 0 is not echo 
0000139C:             ;     ; R11 is used to store address of RxD buffer start  
0000139C:             ;     ; R12 is used to store address of buffer start 
0000139C:             ; 
0000139C:             ; 
0000139C:             ; Terminal_Handler_Constructor
0000139C:             ; ; Constructor 
0000139C:             ;  ; Set up Stack pointer 
0000139C: E28FDFAB    ;     ADRL    SP, Terminal_Handler_Stack_End
000013A0:             ; 
000013A0:             ;  ; Set up Buffer to store input from buffer 
000013A0: E28FCFB6    ;     ADRL    R12, StandardIn_start
000013A4:             ;  ; Saves memeory address to process register 
000013A4: E1A0000C    ;     MOV     R0, R12
000013A8: E3A01064    ;     MOV     R1, #StandardIn_Buffer_Size
000013AC: EBFFFEDD    ;     BL      buffer_initialise
000013B0:             ; 
000013B0:             ; ;
000013B0:             ; ; Main 
000013B0:             ;  ; Set up Constants 
000013B0: E24FBF86    ;   ADRL    R11, Serial_RxD_Buffer_Address 
000013B4: E24BBA01    ; 
000013B8: E51BB000    ;   LDR     R11, [R11]
000013BC: E3A0A001    ;   MOV     R10, #1   ; Boolean for echo 
000013C0:             ;     ;MOV     R10, #Terminal_Control
000013C0:             ;     ;MOV     R9, #Terminal_Data
000013C0:             ; 
000013C0:             ;  ;
000013C0:             ;  ; Second it needs to handler what happens when it is called 
000013C0:             ; Terminal_Handler_Main_Loop
000013C0:             ;   ; Requests control of RxD and TxD 
000013C0:             ;   ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
000013C0:             ;   ; 
000013C0:             ;   ; Check if there is anything in the RxD Buffer 
000013C0: E1A0000B    ;     MOV     R0, R11 
000013C4: EBFFFEF4    ;     BL      buffer_get
000013C8: E3500000    ;     CMP     R0, #&0
000013CC: 0AFFFFFB    ;     BEQ     Terminal_Handler_Main_Loop
000013D0:             ;     
000013D0:             ;     ; Check if the input is an Enter
000013D0: E350000A    ;     CMP     R0, #&A
000013D4: 0A000006    ;     BEQ     Terminal_Handler_Commands
000013D8: 11A09000    ;     MOVNE   R9, R0
000013DC:             ; 
000013DC:             ;   ; Check if in protected mode 
000013DC: E35A0001    ;     CMP     R10, #1
000013E0: 0B000001    ;     BLEQ     Transmit 
000013E4:             ;   ;
000013E4:             ; 
000013E4:             ;     ;   if it is an enter check if it is a known command 
000013E4:             ;         ; Checks if it has recieved a input from the serie line 
000013E4:             ; 
000013E4:             ;     ; Checks to see what the input is and if it shoudl do anyting 
000013E4:             ;     ;   if it is enter it checks what it needs to do 
000013E4:             ;     ; Places input into StandardIn Buffer 
000013E4:             ;     ; Checks to see if it is in echo to terminal mode or not 
000013E4:             ;     ;   If it is it send it to TxD Buffer 
000013E4: E1A09000    ;     MOV   R9, R0
000013E8: EAFFFFF4    ;   B Terminal_Handler_Main_Loop
000013EC:             ; Transmit 
000013EC:             ; ;B     Terminal_Handler_Main_Loop
000013EC:             ; ; This function is responsible for transmitting 
000013EC: EF00000C    ;   SVC   Transmit_SVC
000013F0: EAFFFFF2    ;   B     Terminal_Handler_Main_Loop
000013F4:             ; Terminal_Handler_Commands
000013F4:             ;     ; This function will check input against commands 
000013F4: E3590031    ;     CMP   R9, #&31 
000013F8: 0A000003    ;     BEQ   printHello
000013FC:             ;     
000013FC: E3590032    ;     CMP   R9, #&32
00001400: 0A000005    ;     BEQ   LED_Show
00001404:             ; 
00001404: E3A09000    ;     MOV   R9, #0 
00001408: EAFFFFEC    ;     B     Terminal_Handler_Main_Loop
0000140C:             ; 
0000140C:             ; printHello  
0000140C: E24F0F5B    ;     ADRL  R0, HelloWorld_Handler_Process 
00001410: EF000010    ;     SVC   Start_Process_SVC
00001414: E3A09000    ;     MOV   R9, #0 
00001418: EAFFFFF5    ;     B     Terminal_Handler_Commands
0000141C:             ; 
0000141C:             ; LED_Show    
0000141C: E24F0F83    ;     ADRL  R0, Lights_Handler_Process
00001420: EF000010    ;     SVC   Start_Process_SVC
00001424: E3A09000    ;     MOV   R9, #0 
00001428: EAFFFFF1    ;     B     Terminal_Handler_Commands
0000142C:             ; 
0000142C:             ; 
0000142C:             ; 
0000142C:             ; 
0000142C:             ; GET     HelloWorld.s
0000142C:             ; ; This file is used to print the hello world statement to the LCD 
0000142C:             ; 
0000142C: 48 65 31 32 ; string      DEFB  'He12o Wor3d!',0
00001430: 6F 20 57 6F ; 
00001434: 72 33 64 21 ; 
00001438: 00          ; 
0000143C:             ;             align
0000143C:             ; 
0000143C:             ; 
0000143C:             ; HelloWorld_Handler_Constructor
0000143C:             ; ; set up stack 
0000143C: E28FD03A    ; ADRL    SP, HelloWorld_Stack_End
00001440: E28DDC02    ; 
00001444:             ; 
00001444:             ; ; set and LCD 
00001444: E24F1020    ; ADRL    R1, string
00001448: EBFFFFBE    ; BL      printString 
0000144C:             ; 
0000144C: EAFFFFFE    ; HelloWorld_Loop B HelloWorld_Loop
00001450:             ; 
00001450:             ; 
00001450:             ; ; loop in place 
00001450:             ; 
00001450:             ; ; Temp permanent memeory for user processes 
00001450:             ; GET user_memory.s
00001450:             ; 
00001450:             ; ; variable for different stacks 
00001450:             ; Terminal_Handler_Stack_Size EQU &200
00001450:             ; Lights_Stack_Size           EQu &16
00001450:             ; HelloWorld_Stack_size       EQU &16
00001450:             ; Idle_Stack_Size EQU &20
00001450:             ;     Align 
00001450:             ; StandardIn_Buffer_Size      EQU &64
00001450:             ;     Align
00001450:             ;         ; Terminal Handler Stack 
00001450:             ;         
00001450:             ;         Terminal_Handler_Stack_Start   DEFS Terminal_Handler_Stack_Size ; Terminal_Handler Stac
                      ; k
00001650:             ;         Terminal_Handler_Stack_End
00001650:             ;              Align
00001650:             ; 
00001650:             ;         Lights_Stack_Start              DEFS Lights_Stack_Size
00001666:             ;         Lights_Stack_End
00001668:             ;             Align
00001668:             ; 
00001668:             ;         HelloWorld_Stack_Start          DEFS HelloWorld_Stack_size
0000167E:             ;         HelloWorld_Stack_End
00001680:             ;             Align
00001680:             ; 
00001680:             ;         StandardIn_start DEFS StandardIn_Buffer_Size
000016E4:             ;         StandardIn_End 
000016E4:             ;             Align 
000016E4:             ; 
000016E4:             ;         Idle_Stack_Start   DEFS Idle_Stack_Size 
00001704:             ;         Idle_Stack_End
00001704:             ;              Align
00001704:             ; 
00001704:             ; GET Idle.s
00001704:             ; ; this file is the idle file
00001704:             ; 
00001704:             ; Idle_Constructor
00001704: E24FD008    ;     ADRL    SP, Idle_Stack_End
00001708: EAFFFFFE    ; Idle_Loop B Idle_Loop
0000170C:             ; 
0000170C:             ; 
0000170C:             ; GET     RAM_Space.s
0000170C:             ; ; This fule holds the RAM Space.
0000170C:             ; RAM_Size        EQU &2000  
0000170C:             ; DEFS            RAM_Size

Symbol Table: Labels
: Undefined_Instruction             00000004  Local -- ARM
: Prefetch_Abort                    0000000C  Local -- ARM
: Data_Abort                        00000010  Local -- ARM
: Not_Provided_Except               00000014  Local -- ARM
: Fast_Interrupt_Request            0000001C  Local -- ARM
: Initialise_Program                00000020  Local -- ARM
: SVC_Handler                       00000024  Local -- ARM
: SVC_Jump_Table_Size               00000014  Value
: SVC_Jump_Table                    0000004C  Local -- ARM
: SVC_Jump_Table_End                00000060  Local -- ARM
: SVC_Jump_Table_place_holder       00000060  Local -- ARM
: SVC_Out_Of_Bounds                 00000060  Local -- ARM
: IRQ_Handler                       00000064  Local -- ARM
: IRQ_RxD                           0000008C  Local -- ARM
: IRQ_TxD                           000000AC  Local -- ARM
: TxD_buffer_empty                  000000CC  Local -- ARM
: IRQ_Timer                         000000E0  Local -- ARM
: kernal_Initialise                 000000FC  Local -- ARM
: IRQ_Mode                          00000012  Value
: Super_Mode                        00000013  Value
: System_Mode_Bit_Mask              0000001F  Value
: User_Mode_With_Int                00000050  Value
: Print_String_SVC                  00000000  Value
: Release_LCD_SVC                   00000004  Value
: LED_SVC                           00000008  Value
: Transmit_SVC                      0000000C  Value
: Start_Process_SVC                 00000010  Value
: Port_Area                         10000000  Value
: Port_A                            00000000  Value
: Port_B                            00000004  Value
: RS_Bit                            00000002  Value
: RW_Bit                            00000004  Value
: E_En                              00000001  Value
: LCD_Ready_Status                  00000080  Value
: LED_On                            00000010  Value
: Interrupt_Receiver                00000010  Value
: Interrupt_Transmit                00000020  Value
: Interrupt_Desired                 00000011  Value
: Interrupt_Active_Offset           0000001C  Value
: Interrupt_Alert_Offset            00000018  Value
: Interrupt_Timer_Offset            0000000C  Value
: Interrupt_Time_Interval           00000064  Value
: Serial_RxD_Buffer_Address         000001A0  Local -- ARM
: Serial_TxD_Buffer_Address         000001B8  Local -- ARM
: current_process                   000001BC  Local -- ARM
: sheduler_ready_list_start         000001C0  Local -- ARM
: Supervisor_Stack_Size             00000256  Value
: Interrupt_Stack_Size              00000256  Value
: Supervisor_Stack_Start            000001C4  Local -- ARM
: Supervisor_Stack_End              0000041A  Local -- ARM
: Interrupt_Stack_Start             0000041C  Local -- ARM
: Interrupt_Stack_End               00000672  Local -- ARM
: Serial_RxD_Buffer_Size            00000256  Value
: Serial_TxD_Buffer_Size            00000256  Value
: Serial_RxD_Buffer_Start           00000674  Local -- ARM
: Serial_RxD_Buffer_End             000008CA  Local -- ARM
: Serial_TxD_Buffer_Start           000008CC  Local -- ARM
: Serial_TxD_Buffer_End             00000B22  Local -- ARM
: Interrupt_Set                     00000B24  Local -- ARM
: Interrupt_Off                     00000B38  Local -- ARM
: Transmit_word                     00000B4C  Local -- ARM
: Transmit_word_send                00000B88  Local -- ARM
: Context_Switch                    00000B94  Local -- ARM
: Context_Switch_Store_Return       00000B98  Local -- ARM
: Context_Store                     00000BCC  Local -- ARM
: Context_Load                      00000BF4  Local -- ARM
: memory_request                    00000C14  Local -- ARM
: Reserve_Space_loop                00000C24  Local -- ARM
: he                                00000C44  Local -- ARM
: Reserve_Page                      00000C48  Local -- ARM
: Reserve_Page_Loop                 00000C58  Local -- ARM
: memory_free                       00000C7C  Local -- ARM
: memory_free_loop                  00000C94  Local -- ARM
: memory_free_failure               00000CBC  Local -- ARM
: memory_clean                      00000CC4  Local -- ARM
: memory_clean_loop                 00000CD4  Local -- ARM
: Page_Table_Start                  00000CF0  Local -- ARM
: Page_Table_End                    00000D30  Local -- ARM
: Shedule_Add                       00000D30  Local -- ARM
: Shedule_Add_kernal                00000D4C  Local -- ARM
: Shedule_Add_Loop                  00000D54  Local -- ARM
: Shedule_Add_Prohibited            00000D6C  Local -- ARM
: Shedule_Get_Next                  00000D70  Local -- ARM
: Shedule_Empty                     00000D90  Local -- ARM
: LED_Owner                         00000D98  Local -- ARM
: Set_LED                           00000D9C  Local -- ARM
: Set_LED_Main                      00000DC4  Local -- ARM
: Reserve_LED                       00000DEC  Local -- ARM
: LEDInUse                          00000E04  Local -- ARM
: LCD_Owner                         00000E0C  Local -- ARM
: SVC_printChar                     00000E10  Local -- ARM
: printChar_Status                  00000E3C  Local -- ARM
: printChar_s                       00000E84  Local -- ARM
: Reserve_LCD                       00000ED4  Local -- ARM
: LCDInUse                          00000EEC  Local -- ARM
: Release_LCD_Ownership             00000EF4  Local -- ARM
: Peripheral                        00000F28  Local -- ARM
: Word_Size                         00000004  Value
: Terminal_Data                     00000010  Value
: Terminal_Control                  00000014  Value
: buffer_start                      00000000  Offset
: buffer_end                        00000004  Offset
: buffer_head                       00000008  Offset
: buffer_tail                       0000000C  Offset
: buffer_waiter                     00000010  Offset
: buffer_data                       00000014  Offset
: buffer_initialise                 00000F28  Local -- ARM
: buffer_put                        00000F50  Local -- ARM
: buffer_full                       00000F94  Local -- ARM
: buffer_get                        00000F9C  Local -- ARM
: buffer_empty                      00000FD4  Local -- ARM
: pointer_next                      00000000  Offset
: process_id                        00000004  Offset
: process_constructor               00000008  Offset
: context_switch_pointer            0000000C  Offset
: data                              00000004  Offset
: linked_list_add                   00001058  Local -- ARM
: linked_list_add_loop              0000105C  Local -- ARM
: linked_list_get                   00001074  Local -- ARM
: linked_list_remove                00001090  Local -- ARM
: linked_list_remove_failed         000010B0  Local -- ARM
: linked_list_find                  000010B4  Local -- ARM
: linked_list_find_loop             000010BC  Local -- ARM
: linked_list_find_item_found       000010E4  Local -- ARM
: linked_list_find_end_of_list      000010F0  Local -- ARM
: Idle                              000010F8  Local -- ARM
: Terminal_Handler_Process          00001188  Local -- ARM
: Lights_Handler_Process            00001218  Local -- ARM
: HelloWorld_Handler_Process        000012A8  Local -- ARM
: malloc                            00001338  Local -- ARM
: printString                       00001348  Local -- ARM
: printStringLoop                   00001350  Local -- ARM
: printCharLoop                     00001360  Local -- ARM
: printFailed                       00001378  Local -- ARM
: print_String_Complete             0000137C  Local -- ARM
: Lights_Handler_Constructor        00001384  Local -- ARM
: lights_loop                       00001398  Local -- ARM
: Terminal_Handler_Constructor      0000139C  Local -- ARM
: Terminal_Handler_Main_Loop        000013C0  Local -- ARM
: Transmit                          000013EC  Local -- ARM
: Terminal_Handler_Commands         000013F4  Local -- ARM
: printHello                        0000140C  Local -- ARM
: LED_Show                          0000141C  Local -- ARM
: string                            0000142C  Local -- ARM
: HelloWorld_Handler_Constructor    0000143C  Local -- ARM
: HelloWorld_Loop                   0000144C  Local -- ARM
: Terminal_Handler_Stack_Size       00000200  Value
: Lights_Stack_Size                 00000016  Value
: HelloWorld_Stack_size             00000016  Value
: Idle_Stack_Size                   00000020  Value
: StandardIn_Buffer_Size            00000064  Value
: Terminal_Handler_Stack_Start      00001450  Local -- ARM
: Terminal_Handler_Stack_End        00001650  Local -- ARM
: Lights_Stack_Start                00001650  Local -- ARM
: Lights_Stack_End                  00001666  Local -- ARM
: HelloWorld_Stack_Start            00001668  Local -- ARM
: HelloWorld_Stack_End              0000167E  Local -- ARM
: StandardIn_start                  00001680  Local -- ARM
: StandardIn_End                    000016E4  Local -- ARM
: Idle_Stack_Start                  000016E4  Local -- ARM
: Idle_Stack_End                    00001704  Local -- ARM
: Idle_Constructor                  00001704  Local -- ARM
: Idle_Loop                         00001708  Local -- ARM
: RAM_Size                          00002000  Value
